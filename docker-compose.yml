version: '2.2'
services:
  geonode_db:
    image: geonode/postgis:13
    command: postgres -c "max_connections=${POSTGRESQL_MAX_CONNECTIONS}"
    restart: ${RESTART_POLICY}
    container_name: db4${COMPOSE_PROJECT_NAME}
    stdin_open: true
    labels:
        org.geonode.component: db
        org.geonode.instance.name: geonode
    volumes:
      - ${GEONODE_DB_DATA_VOL}:/var/lib/postgresql/data
      - dbbackups:/pg_backups
    env_file:
      - .env

  geonode_rabbitmq:
    image: rabbitmq
    restart: ${RESTART_POLICY}
    container_name: rabbitmq4${COMPOSE_PROJECT_NAME}
    stdin_open: true
    tty: true
    labels:
        org.geonode.component: rabbitmq
        org.geonode.instance.name: geonode
        org.geonode.deployment.name: ${COMPOSE_PROJECT_NAME}

  geonode_geoserver:
    image: geonode/geoserver:2.18.x
    build: ./docker/geoserver/
    restart: ${RESTART_POLICY}
    container_name: geoserver4${COMPOSE_PROJECT_NAME}
    stdin_open: true
    labels:
        org.geonode.component: geoserver
        org.geonode.instance.name: geonode
    depends_on:
      - geonode_db
      - data-dir-conf
    volumes:
      - ${STATICS_VOL}:/mnt/volumes/statics
      - ${GEOSERVER_DATA_VOL}:/geoserver_data/data
      - ${BACKUP_RESTORE_VOL}:/backup_restore
      - data:/data
      - tmp:/tmp
    env_file:
      - .env

  geonode_django:
    restart: ${RESTART_POLICY}
    build: .
    container_name: django4${COMPOSE_PROJECT_NAME}
    stdin_open: true
    labels:
      org.geonode.component: django
      org.geonode.instance.name: geonode
    depends_on:
      - db
      - rabbitmq
      - data-dir-conf
    volumes:
      - ${STATICS_VOL}:/mnt/volumes/statics
      - ${GEOSERVER_DATA_VOL}:/geoserver_data/data
      - ${BACKUP_RESTORE_VOL}:/backup_restore
      - data:/data
      - tmp:/tmp
    env_file:
      - .env
    environment:
      UWSGI_CMD: uwsgi --ini /usr/src/icpac_geoportal/uwsgi.ini
      IS_CELERY: 'False'

  geonode_celery:
    restart: ${RESTART_POLICY}
    #build: .
    image: ${COMPOSE_PROJECT_NAME}_django:latest
    container_name: celery4${COMPOSE_PROJECT_NAME}
    stdin_open: true
    network_mode: "host"
    labels:
      org.geonode.component: celery
      org.geonode.instance.name: geonode
    depends_on:
      - django
      - db
      - rabbitmq
      - data-dir-conf
    volumes:
      - ${STATICS_VOL}:/mnt/volumes/statics
      - ${GEOSERVER_DATA_VOL}:/geoserver_data/data
      - ${BACKUP_RESTORE_VOL}:/backup_restore
      - data:/data
      - tmp:/tmp
    env_file:
      - .env
    environment:
      CELERY_CMD: celery-cmd
      IS_CELERY: 'True'

  geonode_nginx:
    image: geonode/nginx:3.x
    build: ./docker/nginx/
    restart: ${RESTART_POLICY}
    container_name: nginx4${COMPOSE_PROJECT_NAME}
    stdin_open: true
    # tty: true
    labels:
        org.geonode.component: nginx
        org.geonode.instance.name: geonode
    # depends_on:
    #   - django
    #   - geoserver
    ports:
      - "${GEONODE_PUBLIC_PORT}:80"
      # - "443:443"
    volumes:
      - nginx-confd:/etc/nginx
      - ${SSL_CERTIFICATES_VOL}:/geonode-certificates
      - ${STATICS_VOL}:/mnt/volumes/statics
    env_file:
      - .env

  data-dir-conf:
    image: geonode/geoserver_data:2.18.x
    restart: ${RESTART_POLICY}
    container_name: gsconf4${COMPOSE_PROJECT_NAME}
    labels:
        org.geonode.component: conf
        org.geonode.instance.name: geonode
    command: /bin/true
    volumes:
      - ${GEOSERVER_DATA_VOL}:/geoserver_data/data

volumes:
  nginx-confd:
    name: ${COMPOSE_PROJECT_NAME}-nginxconfd
  dbbackups:
    name: ${COMPOSE_PROJECT_NAME}-dbbackups
  data:
    name: ${COMPOSE_PROJECT_NAME}-data
  tmp:
    name: ${COMPOSE_PROJECT_NAME}-tmp